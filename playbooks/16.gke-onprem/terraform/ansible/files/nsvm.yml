---
- name: perpare nsvm
  hosts: localhost
  tags:
    - prepare_nsvm
  gather_facts: false
  tasks:
    - name: create temp dir
      tempfile:
        state: directory
        suffix: .build
      register: build_dir

    - debug:
        var: build_dir.path

    - name: prepare the govc guest.start script
      local_action:
        module: template
        src: nsvm.sh.j2
        dest: '{{ build_dir.path }}/nsvm.sh'

    - name: prepare run-set-ip.sh
      local_action:
        module: template
        src: run-set-ip.sh.j2
        dest: '{{ build_dir.path }}/run-set-ip.sh'

    - name: use govc to run set-ip.sh on nsvm
      local_action: command sh {{ build_dir.path }}/nsvm.sh

- name: configure nsvm
  hosts: nsvm
  tags:
    - config_nsvm
  gather_facts: no
  tasks:
    # [START] wait for nsvm to be reachable from ssh
    - name: wait 300 seconds, but only start checking after 10 seconds
      wait_for_connection:
        delay: 10
        timeout: 300

    - name: gathering facts
      setup:
      tags:
        - test
    # [END]

    # [START] upgrade the packages and reboot
    - name: upgrade all packages to the latest version
      become: yes
      apt:
        update_cache: yes
        upgrade: yes
      register: upgrade_result

    - name: reboot immediately if there was a change.
      become: yes
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: upgrade_result is changed

    - name: wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: upgrade_result is changed
    # [END]

    # [START] install tools
    - name: install govc
      become: yes
      shell: |
        wget -qO- {{ govc }} | gzip - -d > /usr/local/bin/govc
        chmod +x /usr/local/bin/govc
      args:
        creates: /usr/local/bin/govc

    - name: install patched kubectl
      become: yes
      shell: |
        gsutil cp gs://nmiu-play_tools/kubectl-116-linux /usr/local/bin/k-dev
        chmod +x /usr/local/bin/k-dev
      args:
        creates: /usr/local/bin/k-dev

    - name: install packages
      become: yes
      apt:
        name: ['git','jq','bash-completion']

    - name: install yq
      become: yes
      get_url:
        url: 'https://github.com/mikefarah/yq/releases/download/2.3.0/yq_linux_amd64'
        dest: '/usr/local/bin/yq'
        mode: 0755
    # [END]

    # - name: allow 'sudo' group to have passwordless sudo
    #   become: yes
    #   become_user: root
    #   lineinfile:
    #     dest: /etc/sudoers
    #     state: present
    #     regexp: '^%sudo'
    #     line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    #     validate: 'visudo -cf %s'

    # [START] setup gcloud
    - name: copy gke-onprem service account key file to nsvm
      copy:
        src: '{{ gkeonprem_service_account_key_file }}'
        dest: '{{ ansible_env.HOME }}/release-reader-key.json'
        mode: 0600

    - name: setup gcloud project
      become: yes
      command: gcloud config set project {{ gcp_project }}
      args:
        chdir: '{{ ansible_env.HOME }}'

    - name: setup gcloud compute zone
      become: yes
      command: gcloud config set compute/zone {{ gcp_compute_zone }}
      args:
        chdir: '{{ ansible_env.HOME }}'

    - name: activate gke-onprem service account
      become: yes
      command: gcloud auth activate-service-account {{ gkeonprem_service_account_email }} --key-file=release-reader-key.json
      args:
        chdir: '{{ ansible_env.HOME }}'
    # [END]

    # [START] prepare GKE-OP deployment scripts and files
    - name: create buildscripts dir
      file:
        path: '{{ ansible_env.HOME }}/buildscripts'
        state: directory

    - name: download and extract build scripts
      unarchive:
        src: '{{ buildscripts }}'
        dest: '{{ ansible_env.HOME }}/buildscripts'
        remote_src: yes

    - name: link the gke-onprem service account key file into buildscripts dir
      file:
        src: '{{ ansible_env.HOME }}/release-reader-key.json'
        dest: '{{ ansible_env.HOME }}/buildscripts/release-reader-key.json'
        state: link

    - name: download f5 ova
      get_url:
        url: '{{ ova_f5 }}'
        dest: '{{ ansible_env.HOME }}'

    - name: download vcenter iso
      get_url:
        url: '{{ vcenter_iso }}'
        dest: '{{ ansible_env.HOME }}'
    # [END]

    # [START] run deploy script
    - name: run deploy script
      become: yes
      shell: 'echo {{ gke_op_version }} | sh deployall.sh'
      args:
        chdir: '{{ ansible_env.HOME }}/buildscripts'
      tags:
        - run_deploy_script
    # [END]

    # [START] post deploy
    - name: create data folder on vsphere datastore
      command: govc datastore.mkdir -dc="GKE On-Prem" -ds="{{ esxi_ds_name }}" gke-on-prem/
      environment:
        GOVC_URL: 'https://172.16.10.2/sdk' # vCenter's IP
        GOVC_USERNAME: '{{ vcenter_admin_username }}'
        GOVC_PASSWORD: '{{ vcenter_admin_password }}'
        GOVC_INSECURE: true

    # need to manually scp this from nsvm to adminws
    - name: admin workstation configuration script
      template:
        src: adminws.sh.j2
        dest: '{{ ansible_env.HOME }}/adminws.sh'
        mode: 0755
      tags:
        - test
    # [END]